
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================





module system_bus
	#(parameter DATA_WIDTH, 
	parameter ADDR_WIDTH, 
	parameter NO_OF_MASTER, 
	parameter NO_OF_SLAVE, 
	
	parameter [NO_OF_SLAVE-1:0] SLAVE_BASE_ADDR [ADDR_WIDTH-1:0], 
	parameter [NO_OF_SLAVE-1:0] SLAVE_END_ADDR ,

	) 
	
	(
	
	input clk,
	input reset_n,
	
	/// MASTER
	
	// read address channel
	input [ADDR_WIDTH-1:0]  araddr_mm2s [NO_OF_MASTER-1:0],
	input [NO_OF_MASTER-1:0] arvalid_mm2s,
	output [NO_OF_MASTER-1:0] arready_mm2s,
	
	
	// read data channel
	input [NO_OF_MASTER-1:0] rready_mm2s,
	output [DATA_WIDTH-1:0] rdata_mm2s [NO_OF_MASTER-1:0],
	output [NO_OF_MASTER-1:0] rresp_mm2s,
	output [NO_OF_MASTER-1:0] rvalid_mm2s,
	
	// write address channel
	input  [ADDR_WIDTH-1:0] awaddr_mm2s [NO_OF_MASTER-1:0],
	input [NO_OF_MASTER-1:0] awvalid_mm2s,
	output awready_mm2s,

	// write data channel
	input [DATA_WIDTH-1:0] wdata_mm2s [NO_OF_MASTER-1:0],
	input [NO_OF_MASTER-1:0] wstrb_mm2s,
	input [NO_OF_MASTER-1:0] wvalid_mm2s,
	output [NO_OF_MASTER-1:0] wready_mm2s,
	 
	// write response channel
	input [NO_OF_MASTER-1:0] bready_mm2s,
	output [NO_OF_MASTER-1:0] bresp_mm2s,
	output [NO_OF_MASTER-1:0] bvalid_mm2s
	
	// priority 
	input [1:0]priority_no [NO_OF_MASTER-1:0], // 0- lowest, 3-highest 
	
	/// SALVE
	
	// read address channel
	output [ADDR_WIDTH-1:0] araddr_s2mm [NO_OF_SLAVE-1:0],
	output [NO_OF_SLAVE-1:0] arvalid_s2mm,
	input [NO_OF_SLAVE-1:0] arready_s2mm,
	
	
	// read data channel
	output [NO_OF_SLAVE-1:0] rready_s2mm,
	input [DATA_WIDTH-1:0] rdata_s2mm [NO_OF_SLAVE-1:0],
	input [NO_OF_SLAVE-1:0] rresp_s2mm,
	input [NO_OF_SLAVE-1:0] rvalid_s2mm,
	
	// write address channel
	output [ADDR_WIDTH-1:0] awaddr_s2mm [NO_OF_SLAVE-1:0],
	output [NO_OF_SLAVE-1:0] awvalid_s2mm,
	input [NO_OF_SLAVE-1:0] awready_s2mm,

	// write data channel
	output [DATA_WIDTH-1:0] wdata_s2mm [NO_OF_SLAVE-1:0],
	output [NO_OF_SLAVE-1:0] wstrb_s2mm,
	output [NO_OF_SLAVE-1:0] wvalid_s2mm,
	input [NO_OF_SLAVE-1:0] wready_s2mm,
	 
	// write response channel
	output [NO_OF_SLAVE-1:0] bready_s2mm,
	input [NO_OF_SLAVE-1:0] bresp_s2mm,
	input [NO_OF_SLAVE-1:0] bvalid_s2mm
	
	);
	
	// Address decoder
	reg [ADDR_WIDTH-1:0] awaddr_s2mm_bus [NO_OF_SLAVE-1:0];
	reg [ADDR_WIDTH-1:0] araddr_s2mm_bus [NO_OF_SLAVE-1:0];
	
	generate
		for (genvar i=0;i<NO_OF_SLAVE;i++)
			begin
				assign awaddr_s2mm[i]=awaddr_s2mm_bus[i]-SLAVE_BASE_ADDR[i];
				assign araddr_s2mm[i]=araddr_s2mm_bus[i]-SLAVE_BASE_ADDR[i];
			end
	endgenerate	

	// 
	// Pipeline stages of arbitrator
	// 1. Master identify and choose (based of valid signals and priority)
	// 2. Identify the slave
	// 3. write data to corresponding slave (interface registers)
	// 4. Identify replied slaves.
	// 5. Write the reply to corresponding master
	// 
	
	
	// Arbitrator
	
	always @(posedge clk or negedge reset_n)
		begin
			if(~reset_n)
				begin
				
				
				end
			else
				begin
				
				
				end

		end
	
	
	
	

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================


//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



endmodule
